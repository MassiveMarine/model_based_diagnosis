"""autogenerated by genpy from tug_ist_diagnosis_msgs/DBoardMeasurments.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import tug_ist_diagnosis_msgs.msg

class DBoardMeasurments(genpy.Message):
  _md5sum = "4824daab1e9545346b582551fc8fa86b"
  _type = "tug_ist_diagnosis_msgs/DBoardMeasurments"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float32 o_time
Channel[] channel

================================================================================
MSG: tug_ist_diagnosis_msgs/Channel
int32 id
string dev_connected
int32 status
float32 current
float32 voltage

"""
  __slots__ = ['o_time','channel']
  _slot_types = ['float32','tug_ist_diagnosis_msgs/Channel[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       o_time,channel

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(DBoardMeasurments, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.o_time is None:
        self.o_time = 0.
      if self.channel is None:
        self.channel = []
    else:
      self.o_time = 0.
      self.channel = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_struct_f.pack(self.o_time))
      length = len(self.channel)
      buff.write(_struct_I.pack(length))
      for val1 in self.channel:
        buff.write(_struct_i.pack(val1.id))
        _x = val1.dev_connected
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1
        buff.write(_struct_i2f.pack(_x.status, _x.current, _x.voltage))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.channel is None:
        self.channel = None
      end = 0
      start = end
      end += 4
      (self.o_time,) = _struct_f.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.channel = []
      for i in range(0, length):
        val1 = tug_ist_diagnosis_msgs.msg.Channel()
        start = end
        end += 4
        (val1.id,) = _struct_i.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.dev_connected = str[start:end].decode('utf-8')
        else:
          val1.dev_connected = str[start:end]
        _x = val1
        start = end
        end += 12
        (_x.status, _x.current, _x.voltage,) = _struct_i2f.unpack(str[start:end])
        self.channel.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_struct_f.pack(self.o_time))
      length = len(self.channel)
      buff.write(_struct_I.pack(length))
      for val1 in self.channel:
        buff.write(_struct_i.pack(val1.id))
        _x = val1.dev_connected
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1
        buff.write(_struct_i2f.pack(_x.status, _x.current, _x.voltage))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.channel is None:
        self.channel = None
      end = 0
      start = end
      end += 4
      (self.o_time,) = _struct_f.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.channel = []
      for i in range(0, length):
        val1 = tug_ist_diagnosis_msgs.msg.Channel()
        start = end
        end += 4
        (val1.id,) = _struct_i.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.dev_connected = str[start:end].decode('utf-8')
        else:
          val1.dev_connected = str[start:end]
        _x = val1
        start = end
        end += 12
        (_x.status, _x.current, _x.voltage,) = _struct_i2f.unpack(str[start:end])
        self.channel.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_i = struct.Struct("<i")
_struct_i2f = struct.Struct("<i2f")
_struct_f = struct.Struct("<f")
