"""autogenerated by genpy from tug_ist_diagnosis_msgs/Diagnosis.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import tug_ist_diagnosis_msgs.msg

class Diagnosis(genpy.Message):
  _md5sum = "1a2002a6f57e647d108be3b4d120bbb7"
  _type = "tug_ist_diagnosis_msgs/Diagnosis"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float32 o_time
DiagnosisResults[] diag

================================================================================
MSG: tug_ist_diagnosis_msgs/DiagnosisResults
string[] good
string[] bad

"""
  __slots__ = ['o_time','diag']
  _slot_types = ['float32','tug_ist_diagnosis_msgs/DiagnosisResults[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       o_time,diag

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Diagnosis, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.o_time is None:
        self.o_time = 0.
      if self.diag is None:
        self.diag = []
    else:
      self.o_time = 0.
      self.diag = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_struct_f.pack(self.o_time))
      length = len(self.diag)
      buff.write(_struct_I.pack(length))
      for val1 in self.diag:
        length = len(val1.good)
        buff.write(_struct_I.pack(length))
        for val2 in val1.good:
          length = len(val2)
          if python3 or type(val2) == unicode:
            val2 = val2.encode('utf-8')
            length = len(val2)
          buff.write(struct.pack('<I%ss'%length, length, val2))
        length = len(val1.bad)
        buff.write(_struct_I.pack(length))
        for val2 in val1.bad:
          length = len(val2)
          if python3 or type(val2) == unicode:
            val2 = val2.encode('utf-8')
            length = len(val2)
          buff.write(struct.pack('<I%ss'%length, length, val2))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.diag is None:
        self.diag = None
      end = 0
      start = end
      end += 4
      (self.o_time,) = _struct_f.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.diag = []
      for i in range(0, length):
        val1 = tug_ist_diagnosis_msgs.msg.DiagnosisResults()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.good = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2 = str[start:end].decode('utf-8')
          else:
            val2 = str[start:end]
          val1.good.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.bad = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2 = str[start:end].decode('utf-8')
          else:
            val2 = str[start:end]
          val1.bad.append(val2)
        self.diag.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_struct_f.pack(self.o_time))
      length = len(self.diag)
      buff.write(_struct_I.pack(length))
      for val1 in self.diag:
        length = len(val1.good)
        buff.write(_struct_I.pack(length))
        for val2 in val1.good:
          length = len(val2)
          if python3 or type(val2) == unicode:
            val2 = val2.encode('utf-8')
            length = len(val2)
          buff.write(struct.pack('<I%ss'%length, length, val2))
        length = len(val1.bad)
        buff.write(_struct_I.pack(length))
        for val2 in val1.bad:
          length = len(val2)
          if python3 or type(val2) == unicode:
            val2 = val2.encode('utf-8')
            length = len(val2)
          buff.write(struct.pack('<I%ss'%length, length, val2))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.diag is None:
        self.diag = None
      end = 0
      start = end
      end += 4
      (self.o_time,) = _struct_f.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.diag = []
      for i in range(0, length):
        val1 = tug_ist_diagnosis_msgs.msg.DiagnosisResults()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.good = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2 = str[start:end].decode('utf-8')
          else:
            val2 = str[start:end]
          val1.good.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.bad = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2 = str[start:end].decode('utf-8')
          else:
            val2 = str[start:end]
          val1.bad.append(val2)
        self.diag.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_f = struct.Struct("<f")
